
Introduction
============

I've created sections here to put fourth code conventions that we should follow. The essential idea is to conform to
these styles so that code is easier to read, easier to share, easier to maintain, etc etc. I think in general we just
want to move fast and not worry about these so much at the start, but if this starts turning into a more significant
project rather than just minimal-viable-product style, we should spend a bit of time here.

I have a proposal section for each of us where we can add what we think should be conventions. The other can comment
here or we can discuss via Skype/whatever about it. If we both agree on something, put it into the law sections.

If I add something and you find it agreeable, move it to Laws, change the current code to reflect that, and hence
fourth we will use that convention.


Definitions
===========

1. Let "non-public" refer to something that is package-private (the default if you put nothing), protected, or private.


Evans Proposals
===============
 *

Coltins Proposals
=================
 * Line lengths should not exceed 120.
 * Method parameters are considered final, don't modify them. We won't make them final because that's a lot of ugly
    boilerplate code, but let's treat them that way.
 * Non-public class variables should be prefixed "m". The idea is to make it very easy to identify when you are
    changing a classes state (member variables), which makes it a lot easier to trace through the code. It also helps
    avoid situations where you write `this.someVar = someVar`. Yuck.
 * Public member variables don't need the "m" prefix, but these should be final. Non-final member variables should
    have a getter if you want it to be accessed. Having external things modify the state makes code hard to read, and
    should be done through setters.
 * Constants be ALL_UPPER_CASE and separated by underscores. This makes them easy to identify.
 * "someHttpVariable" instead of "someHTTPVariable"
 * No author tags. They are boiler plate that doesn't really help in any way.
 * Write a javadoc for every class/interface/enum/etc, even small subclasses should have a javadoc. Why does this
    class, what can it be used for, etc.


Laws
====

